from __future__ import annotations

from pathlib import Path
from typing import Dict, Any, List, Tuple

from .adapters.repo_git import RepoHelper, file_write
from .adapters.vcs_github import VCS
from .registry import RepoContext
from .config import load_settings


CI_YML = """name: CI
on: [pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: pip install -r requirements.txt || true
      - run: pytest -q || true
"""

PR_TEMPLATE = """## Summary
- Describe the changes and why they are needed

## Linked Tasks
- Link task IDs here (e.g., T-0001)

## Validation
- How was this tested?

## Documentation
- Ensure CHANGELOG and any relevant docs are updated
"""

CODEOWNERS_CONTENT = """# CODEOWNERS
# TODO: Define code owners for critical paths
# Example:
# *       @org/llm-team
"""

TASK_TEMPLATE = """---
id: T-XXXX
title: <short title>
type: chore
priority: P2
depends_on: []
status: queued
owner: unassigned
estimate: 1h
acceptance:
  - "Describe expected outcome"
---

## Description
Describe the task in detail.

## Deliverables
- List artifacts that should be part of the PR
"""

PRD_STUB = """# Product Requirements Document (PRD)

## Overview
Short summary of the product or feature.

## Goals
- Primary goals

## Non-goals
- Out of scope
"""

LLM_TEAM_YML = """# Default LLM team configuration
review:
  enabled: true
  require_docs: true
  checklists:
    - Lints pass
    - Types pass
    - Tests pass or are updated
    - Docs updated (CHANGELOG)
"""


def compute_bootstrap_plan(repo_root: str | Path) -> List[Dict[str, Any]]:
    """Compute a list of file operations to scaffold the repository.

    Each plan item: {"path": <relative path>, "content": <str>, "action": "create"|"update"}
    """
    root = Path(repo_root)

    candidates: List[Tuple[str, str]] = [
        (".github/workflows/ci.yml", CI_YML),
        (".github/PULL_REQUEST_TEMPLATE.md", PR_TEMPLATE),
        ("CODEOWNERS", CODEOWNERS_CONTENT),
        ("tasks/_template.md", TASK_TEMPLATE),
        ("docs/PRD.md", PRD_STUB),
        (".llm-team.yml", LLM_TEAM_YML),
    ]

    plan: List[Dict[str, Any]] = []
    for rel_path, content in candidates:
        p = root / rel_path
        if not p.exists():
            plan.append({"path": rel_path, "content": content, "action": "create"})
        else:
            # For ci.yml and PR template we might refresh minimal defaults if empty
            try:
                txt = p.read_text(encoding="utf-8")
            except Exception:
                txt = ""
            if rel_path.endswith("ci.yml") and "pytest" not in (txt or ""):
                plan.append({"path": rel_path, "content": content, "action": "update"})
            elif rel_path.endswith("PULL_REQUEST_TEMPLATE.md") and "Summary" not in (txt or ""):
                plan.append({"path": rel_path, "content": content, "action": "update"})
            # For other existing files, skip updates
    return plan


def apply_bootstrap(repo_ctx: RepoContext, plan: List[Dict[str, Any]]) -> Dict[str, Any]:
    """Apply the bootstrap plan in a new branch and open a PR."""
    settings = load_settings()
    helper = RepoHelper(repo_ctx, settings.workdir_root)
    repo_root = Path(helper.ensure_local_clone())

    branch = "bootstrap/init"
    helper.create_branch(branch)

    for item in plan:
        rel = item["path"]
        content = item["content"]
        out_path = repo_root / rel
        file_write(out_path, content)

    helper.commit_all("chore: bootstrap repo scaffolding")
    helper.push_branch(branch)

    vcs = VCS(repo_ctx, settings.gh_token)
    body_lines = ["This PR bootstraps repository scaffolding:", ""]
    for item in plan:
        body_lines.append(f"- {item['action']}: `{item['path']}`")
    body_lines.append("")
    body_lines.append("Generated by codex-orchestrator bootstrap")
    body = "\n".join(body_lines)

    pr_url = vcs.open_pr(
        head=branch,
        base=settings.default_branch,
        title="Bootstrap repo scaffolding",
        body=body,
    )
    return {"ok": True, "branch": branch, "pr_url": pr_url}
